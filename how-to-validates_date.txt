- ./script/plugin install git://github.com/adzap/validates_timeliness.git
- Open a model and put something like this
	validates_date :contract_date, :invalid_date_message => I18n.t('error.date_format')
- Create a new file called date_formats.rb in config/initializer, and put this line
	ValidatesTimeliness::Formats.add_formats(:date, 'd-mmm-yy')
- use the following error message hash to override default error message.
  :invalid_date_message
  :invalid_time_message
  :invalid_datetime_message
  :is_at_message
  :before_message  >>>>> can check if the date is before 
  :on_or_before_message
  :after_message
  :on_or_after_message
  :between_message
	
	

Date formats:
  yyyy/mm/dd
  yyyy-mm-dd
  yyyy.mm.dd
  m/d/yy  OR  d/m/yy
  m\d\yy  OR  d\m\yy
  d-m-yy
  d.m.yy
  d mmm yy
NOTE: To use non-US date formats see US/EURO FORMATS section

Datetime formats:
  m/d/yy h:nn:ss   OR  d/m/yy hh:nn:ss
  m/d/yy h:nn      OR  d/m/yy h:nn
  m/d/yy h:nn_ampm OR  d/m/yy h:nn_ampm
  yyyy-mm-dd hh:nn:ss
  yyyy-mm-dd h:nn
  ddd mmm d hh:nn:ss zo yyyy # Ruby time string
  yyyy-mm-ddThh:nn:ssZ  # ISO 8601 without zone offset
  yyyy-mm-ddThh:nn:sszo # ISO 8601 with zone offset
NOTE: To use non-US date formats see US/EURO FORMATS section

Here is what each format token means:

  Format tokens:
       y = year
       m = month
       d = day
       h = hour
       n = minute
       s = second
       u = micro-seconds
    ampm = meridian (am or pm) with or without dots (e.g. am, a.m, or a.m.)
       _ = optional space
      tz = Timezone abbreviation (e.g. UTC, GMT, PST, EST)
      zo = Timezone offset (e.g. +10:00, -08:00, +1000)

  Repeating tokens:
       x = 1 or 2 digits for unit (e.g. 'h' means an hour can be '9' or '09')
      xx = 2 digits exactly for unit (e.g. 'hh' means an hour can only be '09')

  Special Cases:
      yy = 2 or 4 digit year
    yyyy = exactly 4 digit year
     mmm = month long name (e.g. 'Jul' or 'July')
     ddd = Day name of 3 to 9 letters (e.g. Wed or Wednesday)
       u = microseconds matches 1 to 3 digits
All other characters are considered literal. For the technically minded (well you are developers), these formats are compiled into regular expressions at runtime so don’t add any extra overhead than using regular expressions directly. So, no, it won’t make your app slow!

To see all defined formats look in lib/validates_timeliness/formats.rb.